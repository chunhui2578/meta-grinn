diff -Naur a/arch/arm/mach-omap2/board-am335xevm.c b/arch/arm/mach-omap2/board-am335xevm.c
--- a/arch/arm/mach-omap2/board-am335xevm.c	2013-01-25 09:42:18.000000000 +0100
+++ b/arch/arm/mach-omap2/board-am335xevm.c	2013-01-16 09:10:06.000000000 +0100
@@ -4257,21 +4257,28 @@
 	{NULL, 0},
 };
 
+#ifdef CONFIG_AM335XEVM_UART
+//piny do uart5 (rs-485)
 static struct pinmux_config chilisom_evb_uart5_pin_mux[] = {
-	{"rmii1_refclk.rmii1_refclk", OMAP_MUX_MODE3 | AM33XX_PIN_OUTPUT},		// To jest do sprawdzenia - nie ma tego w pliku mux33xx.c	/ Podlaczony RMII1_REFCLK
-	{"lcd_data14.lcd_data14", OMAP_MUX_MODE4 | AM33XX_PIN_INPUT_PULLUP},		// To jest do sprawdzenia - nie ma tego w pliku mux33xx.c
+	{"rmii1_refclk.rmii1_refclk", OMAP_MUX_MODE3 | AM33XX_PIN_OUTPUT},
+	{"mii1_col.mii1_col", OMAP_MUX_MODE3 | AM33XX_PIN_INPUT_PULLUP},
+	{"mii1_rxerr.mii1_rxerr", OMAP_MUX_MODE5 | AM33XX_PIN_OUTPUT},
 	{NULL, 0},
 };
+#endif /*CONFIG_AM335XEVM_UART*/
 
 static void chilisom_evb_uart_all_init(int evm_id, int profile)
 {
 	pr_info("Configure all UARTs\n");
-	setup_pin_mux(chilisom_evb_uart0_pin_mux);
-	setup_pin_mux(chilisom_evb_uart1_pin_mux);
-	setup_pin_mux(chilisom_evb_uart2_pin_mux);
-	setup_pin_mux(chilisom_evb_uart3_pin_mux);
-	setup_pin_mux(chilisom_evb_uart4_pin_mux);
+#ifdef CONFIG_AM335XEVM_UART
+	//piny poza uart5 niesprawdzone
+	//setup_pin_mux(chilisom_evb_uart0_pin_mux);
+	//setup_pin_mux(chilisom_evb_uart1_pin_mux);
+	//setup_pin_mux(chilisom_evb_uart2_pin_mux);
+	//setup_pin_mux(chilisom_evb_uart3_pin_mux);
+	//setup_pin_mux(chilisom_evb_uart4_pin_mux);
 	setup_pin_mux(chilisom_evb_uart5_pin_mux);
+#endif /*CONFIG_AM335XEVM_UART*/
 	return;
 }
 
diff -Naur a/arch/arm/plat-omap/include/plat/omap-serial.h b/arch/arm/plat-omap/include/plat/omap-serial.h
--- a/arch/arm/plat-omap/include/plat/omap-serial.h	2013-01-25 09:42:18.000000000 +0100
+++ b/arch/arm/plat-omap/include/plat/omap-serial.h	2013-01-15 09:22:06.000000000 +0100
@@ -128,6 +128,13 @@
 	unsigned char		msr_saved_flags;
 	char			name[20];
 	unsigned long		port_activity;
+
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+	struct serial_rs485	rs485;
+	unsigned int		tx_in_progress:1,
+				tx_wait_end:1;
+#endif /* UART_RS485_RTS_DIRECTION_CHANGE */
+
 	u32			context_loss_cnt;
 	u32			errata;
 	u8			wakeups_enabled;
diff -Naur a/drivers/tty/serial/Kconfig b/drivers/tty/serial/Kconfig
--- a/drivers/tty/serial/Kconfig	2013-01-25 09:39:58.000000000 +0100
+++ b/drivers/tty/serial/Kconfig	2013-01-16 09:57:33.000000000 +0100
@@ -1349,6 +1349,15 @@
 	  your boot loader about how to pass options to the kernel at
 	  boot time.)
 
+config UART_RS485_RTS_DIRECTION_CHANGE
+	bool "OMAP UART RTS rising on transmision"
+	depends on SERIAL_OMAP
+	help
+	  Select this option if you would like to use omap serial port with rising
+	  RTS pin when transmitting. To use this mode calling ioctl with command
+	  TIOCSRS485, setting RAW mode for port is necessary and disabling both
+	  software and hardware flow control.
+
 config SERIAL_OF_PLATFORM_NWPSERIAL
 	tristate "NWP serial port driver"
 	depends on PPC_OF && PPC_DCR
diff -Naur a/drivers/tty/serial/omap-serial.c b/drivers/tty/serial/omap-serial.c
--- a/drivers/tty/serial/omap-serial.c	2013-01-25 09:39:58.000000000 +0100
+++ b/drivers/tty/serial/omap-serial.c	2013-01-23 15:24:43.000000000 +0100
@@ -37,6 +37,11 @@
 #include <linux/clk.h>
 #include <linux/serial_core.h>
 #include <linux/irq.h>
+
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+#include <linux/uaccess.h>
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
+
 #include <linux/pm_runtime.h>
 #include <linux/of.h>
 
@@ -44,6 +49,10 @@
 #include <plat/dmtimer.h>
 #include <plat/omap-serial.h>
 
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+#define OMAP_RS485_SUPPORTED	(SER_RS485_ENABLED | SER_RS485_RTS_ON_SEND)
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
+
 #define DEFAULT_CLK_SPEED 48000000 /* 48Mhz*/
 
 static struct uart_omap_port *ui[OMAP_MAX_HSUART_PORTS];
@@ -126,6 +135,63 @@
 	pm_runtime_put(&up->pdev->dev);
 }
 
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+static inline void serial_omap_enable_ier_thri(struct uart_omap_port *up)
+{
+	if (!(up->ier & UART_IER_THRI)) {
+		up->ier |= UART_IER_THRI;
+		serial_out(up, UART_IER, up->ier);
+	}
+}
+
+static inline void serial_omap_disable_ier_thri(struct uart_omap_port *up)
+{
+	if (up->ier & UART_IER_THRI) {
+		up->ier &= ~UART_IER_THRI;
+		serial_out(up, UART_IER, up->ier);
+	}
+}
+
+static inline void serial_omap_thri_mode(struct uart_omap_port *up)
+{
+	unsigned char scr = serial_in(up, UART_OMAP_SCR);
+
+	if (up->tx_wait_end)
+		scr |= UART_OMAP_SCR_TX_EMPTY_CTL_IT;
+	else
+		scr &= ~UART_OMAP_SCR_TX_EMPTY_CTL_IT;
+	serial_out(up, UART_OMAP_SCR, scr);
+}
+
+static inline void serial_omap_update_rts(struct uart_omap_port *up)
+{
+	unsigned char mcr = up->mcr;
+	int rts_on_send = up->rs485.flags & SER_RS485_RTS_ON_SEND;
+
+	if (up->rs485.flags & SER_RS485_ENABLED) {
+		if (up->tx_in_progress) 
+		{
+			if (rts_on_send)
+				mcr |= UART_MCR_RTS;
+			else
+				mcr &= ~UART_MCR_RTS;
+		} 
+		else 
+		{
+			if (rts_on_send)
+				mcr &= ~UART_MCR_RTS;
+			//<--
+			else
+				mcr |= UART_MCR_RTS;
+			//-->
+		}
+	}
+
+	serial_out(up, UART_MCR, mcr);
+}
+
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
+
 static void serial_omap_stop_tx(struct uart_port *port)
 {
 	struct uart_omap_port *up = (struct uart_omap_port *)port;
@@ -146,11 +212,26 @@
 	}
 
 	pm_runtime_get_sync(&up->pdev->dev);
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+//	if (up->ier & UART_IER_THRI) {
+//		up->ier &= ~UART_IER_THRI;
+//		serial_out(up, UART_IER, up->ier);
+	if (!(up->rs485.flags & SER_RS485_ENABLED)) {
+		serial_omap_disable_ier_thri(up);
+		return;
+#else
 	if (up->ier & UART_IER_THRI) {
 		up->ier &= ~UART_IER_THRI;
 		serial_out(up, UART_IER, up->ier);
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
 	}
 
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+	up->tx_wait_end = 1;
+	serial_omap_thri_mode(up);
+	serial_omap_enable_ier_thri(up);
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
+
 	pm_runtime_mark_last_busy(&up->pdev->dev);
 	pm_runtime_put_autosuspend(&up->pdev->dev);
 }
@@ -268,6 +349,7 @@
 		serial_omap_stop_tx(&up->port);
 }
 
+#ifndef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
 static inline void serial_omap_enable_ier_thri(struct uart_omap_port *up)
 {
 	if (!(up->ier & UART_IER_THRI)) {
@@ -275,6 +357,7 @@
 		serial_out(up, UART_IER, up->ier);
 	}
 }
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
 
 static void serial_omap_start_tx(struct uart_port *port)
 {
@@ -283,6 +366,20 @@
 	unsigned int start;
 	int ret = 0;
 
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+	if (up->rs485.flags & SER_RS485_ENABLED) {
+		if (!up->tx_in_progress) {
+			up->tx_in_progress = 1;
+			serial_omap_update_rts(up);
+		}
+		if (up->tx_wait_end) {
+			up->tx_wait_end = 0;
+			serial_omap_thri_mode(up);
+			serial_omap_disable_ier_thri(up);
+		}
+	}
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
+
 	if (!up->use_dma) {
 		pm_runtime_get_sync(&up->pdev->dev);
 		serial_omap_enable_ier_thri(up);
@@ -369,6 +466,13 @@
 	return status;
 }
 
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+static inline unsigned int __serial_omap_tx_empty(struct uart_omap_port *up)
+{
+	return serial_in(up, UART_LSR) & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
+}
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
+
 /**
  * serial_omap_irq() - This handles the interrupt from one port
  * @irq: uart port irq number
@@ -389,6 +493,18 @@
 	}
 
 	spin_lock_irqsave(&up->port.lock, flags);
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+	if (up->tx_wait_end && (iir & UART_IIR_THRI) &&
+			__serial_omap_tx_empty(up)) {
+		up->tx_wait_end = 0;
+		up->tx_in_progress = 0;
+		serial_omap_thri_mode(up);
+		serial_omap_update_rts(up);
+		serial_omap_disable_ier_thri(up);
+		spin_unlock_irqrestore(&up->port.lock, flags);
+		return IRQ_HANDLED;
+	}
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
 	lsr = serial_in(up, UART_LSR);
 	if (iir & UART_IIR_RLSI) {
 		if (!up->use_dma) {
@@ -424,7 +540,12 @@
 	pm_runtime_get_sync(&up->pdev->dev);
 	dev_dbg(up->port.dev, "serial_omap_tx_empty+%d\n", up->port.line);
 	spin_lock_irqsave(&up->port.lock, flags);
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+	//ret = serial_in(up, UART_LSR) & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
+	ret = __serial_omap_tx_empty(up);
+#else
 	ret = serial_in(up, UART_LSR) & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
 	spin_unlock_irqrestore(&up->port.lock, flags);
 	pm_runtime_put(&up->pdev->dev);
 	return ret;
@@ -473,6 +594,12 @@
 	pm_runtime_get_sync(&up->pdev->dev);
 	up->mcr = serial_in(up, UART_MCR);
 	up->mcr |= mcr;
+
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE	
+	if (up->rs485.flags & SER_RS485_ENABLED)
+		serial_omap_update_rts(up);
+#endif
+
 	serial_out(up, UART_MCR, up->mcr);
 	pm_runtime_put(&up->pdev->dev);
 }
@@ -1128,6 +1255,43 @@
 
 #endif
 
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+static int serial_omap_ioctl(struct uart_port *port, unsigned int cmd, unsigned long arg)
+{
+	struct serial_rs485 rs485conf;
+	struct uart_omap_port *up = (struct uart_omap_port *)port;
+	unsigned long flags;
+
+	switch (cmd) {
+	case TIOCSRS485:
+		if (copy_from_user(&rs485conf, (struct serial_rs485 *) arg,
+					sizeof(rs485conf)))
+			return -EFAULT;
+
+		rs485conf.flags &= OMAP_RS485_SUPPORTED;
+		spin_lock_irqsave(&up->port.lock, flags);
+		if (!(rs485conf.flags & SER_RS485_ENABLED)) {
+			up->tx_in_progress = 0;
+			up->tx_wait_end = 0;
+		}
+		up->rs485 = rs485conf;
+		serial_omap_update_rts(up);
+		serial_omap_thri_mode(up);
+		spin_unlock_irqrestore(&up->port.lock, flags);
+
+	case TIOCGRS485:
+		if (copy_to_user((struct serial_rs485 *) arg,
+					&(up->rs485), sizeof(rs485conf)))
+			return -EFAULT;
+		break;
+
+	default:
+		return -ENOIOCTLCMD;
+	}
+	return 0;
+}
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
+
 static struct uart_ops serial_omap_pops = {
 	.tx_empty	= serial_omap_tx_empty,
 	.set_mctrl	= serial_omap_set_mctrl,
@@ -1141,6 +1305,9 @@
 	.shutdown	= serial_omap_shutdown,
 	.set_termios	= serial_omap_set_termios,
 	.pm		= serial_omap_pm,
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+	.ioctl		= serial_omap_ioctl,
+#endif /* CONFIG_UART_RS485_RTS_DIRECTION_CHANGE */
 	.type		= serial_omap_type,
 	.release_port	= serial_omap_release_port,
 	.request_port	= serial_omap_request_port,
diff -Naur a/include/linux/serial_reg.h b/include/linux/serial_reg.h
--- a/include/linux/serial_reg.h	2013-01-25 09:36:20.000000000 +0100
+++ b/include/linux/serial_reg.h	2013-01-15 16:05:32.000000000 +0100
@@ -363,5 +363,10 @@
 #define UART_OMAP_MDR1_CIR_MODE		0x06	/* CIR mode */
 #define UART_OMAP_MDR1_DISABLE		0x07	/* Disable (default state) */
 
+#ifdef CONFIG_UART_RS485_RTS_DIRECTION_CHANGE
+//wedlug RF bit 3 a nie 2 rejestru SCR odpowiada za TX Empty IRQ Mode
+#define UART_OMAP_SCR_TX_EMPTY_CTL_IT	0x04	/* TX Empty IRQ mode */
+#endif /* UART_RS485_RTS_DIRECTION_CHANGE */
+
 #endif /* _LINUX_SERIAL_REG_H */
 
