diff -rupN orig/drivers/mfd/tps65217.c mod/drivers/mfd/tps65217.c
--- orig/drivers/mfd/tps65217.c	2014-11-29 10:55:09.312591225 +0100
+++ mod/drivers/mfd/tps65217.c	2014-06-26 23:33:56.000000000 +0200
@@ -174,6 +174,272 @@ static irqreturn_t nmi_handler(int irq,
 	return IRQ_HANDLED;
 }
 
+static char* tps65217_mux_table[5] = {
+	"none",
+	"vbat",
+	"vsys",
+	"vts",
+	"vicharge"
+};
+
+static ssize_t tps65217_analog_mux_show(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	int mux_value;
+	int ret;
+
+	ret = tps65217_reg_read(tps, TPS65217_REG_MUXCTRL, &mux_value);
+	if (ret)
+	{
+		return sprintf(buf, "error\n"); 
+	}
+	if ((mux_value & 0x07) > 4)
+		mux_value = 0;
+	return sprintf(buf, "%s\n", tps65217_mux_table[mux_value]);
+}
+
+static ssize_t tps65217_analog_mux_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	int mux_value = 0;
+	int count = 0;
+	int ret = -EINVAL;
+	char mux_string[10] = {0};
+
+	if (size > sizeof(mux_string) - 1)
+		size = sizeof(mux_string) - 1;
+
+	while((count < size) && (*buf != '0') && (*buf != '\n'))
+		mux_string[count++] = *buf++;
+
+	for(count = 0; count < sizeof(tps65217_mux_table) / sizeof(char *); count++) {
+		if(strcmp(mux_string, tps65217_mux_table[count]) == 0) {
+			break;
+		}
+	} 
+
+
+	if(count == sizeof(tps65217_mux_table) / sizeof(char *))
+	{
+		dev_info(tps->dev, "Unknown analog mux selection, %s", buf);
+		return ret;
+	}
+	mux_value = count;
+	ret = tps65217_reg_write(tps, TPS65217_REG_MUXCTRL, mux_value, 0);
+	if(ret)
+		dev_err(tps->dev, "Bus error writing new mux selection, %s\n", mux_string);
+
+	return size;
+}
+
+static ssize_t tps65217_led_duty_show(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	int ret;
+
+	ret = tps65217_reg_read(tps, TPS65217_REG_WLEDCTRL2, &reg_value);
+	if (ret)
+	{
+		return sprintf(buf, "error\n"); 
+	}
+	reg_value &= 0x7f;
+	if (reg_value > 99)
+		reg_value = 0;
+	else
+		reg_value++;
+	return sprintf(buf, "%d\n", reg_value);
+}
+
+static ssize_t tps65217_led_duty_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	unsigned long tmp;
+	int ret;
+
+	ret = kstrtoul(buf, 10, &tmp);
+	if (ret != 0)
+		dev_info(tps->dev, "Invalid register value: %s\n", buf);
+	if (tmp == 0)
+		reg_value = 100;
+	else if (tmp > 100)
+		reg_value = 99;
+	else
+		reg_value = tmp - 1;
+	
+	ret = tps65217_reg_write(tps, TPS65217_REG_WLEDCTRL2, reg_value, 0);
+	if(ret)
+		dev_err(tps->dev, "Bus error writing new led duty, %s\n", buf);
+
+	if (reg_value == 100)
+		reg_value = 0x01;
+	else
+		reg_value = 0x09;
+	ret = tps65217_reg_write(tps, TPS65217_REG_WLEDCTRL1, reg_value, 0);
+	if(ret)
+		dev_err(tps->dev, "Bus error writing new led duty, %s\n", buf);
+
+	return size;
+}
+
+static ssize_t tps65217_chgconfig0_show(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	int ret;
+
+	ret = tps65217_reg_read(tps, TPS65217_REG_CHGCONFIG0, &reg_value);
+	if (ret)
+	{
+		return sprintf(buf, "error\n"); 
+	}
+	return sprintf(buf, "0x%02x\n", reg_value);
+}
+
+static ssize_t tps65217_chgconfig0_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	unsigned long tmp;
+	int ret;
+
+	ret = kstrtoul(buf, 16, &tmp);
+	if ((ret != 0) || (tmp > 0xff))
+		dev_info(tps->dev, "Invalid register value: %s\n", buf);
+	reg_value = tmp;
+	
+	ret = tps65217_reg_write(tps, TPS65217_REG_CHGCONFIG0, reg_value, 0);
+	if(ret)
+		dev_err(tps->dev, "Bus error writing new chgconfig, %s\n", buf);
+
+	return size;
+}
+
+static ssize_t tps65217_chgconfig1_show(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	int ret;
+
+	ret = tps65217_reg_read(tps, TPS65217_REG_CHGCONFIG1, &reg_value);
+	if (ret)
+	{
+		return sprintf(buf, "error\n"); 
+	}
+	return sprintf(buf, "0x%02x\n", reg_value);
+}
+
+static ssize_t tps65217_chgconfig1_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	unsigned long tmp;
+	int ret;
+
+	ret = kstrtoul(buf, 16, &tmp);
+	if ((ret != 0) || (tmp > 0xff))
+		dev_info(tps->dev, "Invalid register value: %s\n", buf);
+	reg_value = tmp;
+	
+	ret = tps65217_reg_write(tps, TPS65217_REG_CHGCONFIG1, reg_value, 0);
+	if(ret)
+		dev_err(tps->dev, "Bus error writing new chgconfig, %s\n", buf);
+
+	return size;
+}
+
+static ssize_t tps65217_chgconfig2_show(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	int ret;
+
+	ret = tps65217_reg_read(tps, TPS65217_REG_CHGCONFIG2, &reg_value);
+	if (ret)
+	{
+		return sprintf(buf, "error\n"); 
+	}
+	return sprintf(buf, "0x%02x\n", reg_value);
+}
+
+static ssize_t tps65217_chgconfig2_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	unsigned long tmp;
+	int ret;
+
+	ret = kstrtoul(buf, 16, &tmp);
+	if ((ret != 0) || (tmp > 0xff))
+		dev_info(tps->dev, "Invalid register value: %s\n", buf);
+	reg_value = tmp;
+	
+	ret = tps65217_reg_write(tps, TPS65217_REG_CHGCONFIG2, reg_value, 0);
+	if(ret)
+		dev_err(tps->dev, "Bus error writing new chgconfig, %s\n", buf);
+
+	return size;
+}
+
+static ssize_t tps65217_chgconfig3_show(struct device *dev,
+			struct device_attribute *attr, char *buf)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	int ret;
+
+	ret = tps65217_reg_read(tps, TPS65217_REG_CHGCONFIG3, &reg_value);
+	if (ret)
+	{
+		return sprintf(buf, "error\n"); 
+	}
+	return sprintf(buf, "0x%02x\n", reg_value);
+}
+
+static ssize_t tps65217_chgconfig3_store(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t size)
+{
+	struct tps65217 *tps = dev_get_drvdata(dev);
+	unsigned int reg_value;
+	unsigned long tmp;
+	int ret;
+
+	ret = kstrtoul(buf, 16, &tmp);
+	if ((ret != 0) || (tmp > 0xff))
+		dev_info(tps->dev, "Invalid register value: %s\n", buf);
+	reg_value = tmp;
+	
+	ret = tps65217_reg_write(tps, TPS65217_REG_CHGCONFIG3, reg_value, 0);
+	if(ret)
+		dev_err(tps->dev, "Bus error writing new chgconfig, %s\n", buf);
+
+	return size;
+}
+
+static DEVICE_ATTR(led_duty, 0644, tps65217_led_duty_show, tps65217_led_duty_store);
+static DEVICE_ATTR(analog_mux, 0644, tps65217_analog_mux_show, tps65217_analog_mux_store);
+static DEVICE_ATTR(chgconfig0, 0644, tps65217_chgconfig0_show, tps65217_chgconfig0_store);
+static DEVICE_ATTR(chgconfig1, 0644, tps65217_chgconfig1_show, tps65217_chgconfig1_store);
+static DEVICE_ATTR(chgconfig2, 0644, tps65217_chgconfig2_show, tps65217_chgconfig2_store);
+static DEVICE_ATTR(chgconfig3, 0644, tps65217_chgconfig3_show, tps65217_chgconfig3_store);
+
 static int __devinit tps65217_probe(struct i2c_client *client,
 				const struct i2c_device_id *ids)
 {
@@ -254,6 +520,13 @@ static int __devinit tps65217_probe(stru
 	
 	regulator_has_full_constraints();
 
+	device_create_file(tps->dev, &dev_attr_led_duty);
+	device_create_file(tps->dev, &dev_attr_analog_mux);
+	device_create_file(tps->dev, &dev_attr_chgconfig0);
+	device_create_file(tps->dev, &dev_attr_chgconfig1);
+	device_create_file(tps->dev, &dev_attr_chgconfig2);
+	device_create_file(tps->dev, &dev_attr_chgconfig3);
+
 	return 0;
 
 err_regmap:
@@ -267,6 +540,13 @@ static int __devexit tps65217_remove(str
 	struct tps65217 *tps = i2c_get_clientdata(client);
 	int i;
 
+	device_remove_file(tps->dev, &dev_attr_led_duty);
+	device_remove_file(tps->dev, &dev_attr_analog_mux);
+	device_remove_file(tps->dev, &dev_attr_chgconfig0);
+	device_remove_file(tps->dev, &dev_attr_chgconfig1);
+	device_remove_file(tps->dev, &dev_attr_chgconfig2);
+	device_remove_file(tps->dev, &dev_attr_chgconfig3);
+
 	for (i = 0; i < TPS65217_NUM_REGULATOR; i++)
 		platform_device_unregister(tps->regulator_pdev[i]);
 
