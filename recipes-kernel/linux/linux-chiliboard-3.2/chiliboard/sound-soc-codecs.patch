diff -rupN linux-orig/sound/soc/codecs/tlv320aic32x4.c linux/sound/soc/codecs/tlv320aic32x4.c
--- linux-orig/sound/soc/codecs/tlv320aic32x4.c	2012-11-09 16:16:08.000000000 +0100
+++ linux/sound/soc/codecs/tlv320aic32x4.c	2013-01-04 11:59:41.280550699 +0100
@@ -44,6 +44,23 @@
 
 #include "tlv320aic32x4.h"
 
+#define AIC32x4_8BITS_MASK 0xFF
+
+/* User defined Macros kcontrol builders */
+#define SOC_DOUBLE_R_AIC32x4(xname, reg_left, reg_right, shift, mask, invert) \
+        {	.iface = SNDRV_CTL_ELEM_IFACE_MIXER, .name = (xname),   \
+                        .info = snd_soc_info_volsw_2r_aic32x4,          \
+                        .get = snd_soc_get_volsw_2r_aic32x4, .put = snd_soc_put_volsw_2r_aic32x4, \
+                        .private_value = (reg_left) | ((shift) << 8)  | \
+                        ((mask) << 12) | ((invert) << 20) | ((reg_right) << 24) }
+
+static int snd_soc_info_volsw_2r_aic32x4(struct snd_kcontrol *kcontrol,
+                                         struct snd_ctl_elem_info *uinfo);
+static int snd_soc_get_volsw_2r_aic32x4(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol);
+static int snd_soc_put_volsw_2r_aic32x4(struct snd_kcontrol *kcontrol,
+					struct snd_ctl_elem_value *ucontrol);
+
 struct aic32x4_rate_divs {
 	u32 mclk;
 	u32 rate;
@@ -75,12 +92,12 @@ static DECLARE_TLV_DB_SCALE(tlv_step_1,
 static DECLARE_TLV_DB_SCALE(tlv_step_0_5, 0, 50, 0);
 
 static const struct snd_kcontrol_new aic32x4_snd_controls[] = {
-	SOC_DOUBLE_R_TLV("PCM Playback Volume", AIC32X4_LDACVOL,
-			AIC32X4_RDACVOL, 0, 0x30, 0, tlv_step_0_5),
-	SOC_DOUBLE_R_TLV("HP Driver Gain Volume", AIC32X4_HPLGAIN,
-			AIC32X4_HPRGAIN, 0, 0x1D, 0, tlv_step_1),
-	SOC_DOUBLE_R_TLV("LO Driver Gain Volume", AIC32X4_LOLGAIN,
-			AIC32X4_LORGAIN, 0, 0x1D, 0, tlv_step_1),
+	SOC_DOUBLE_R_AIC32x4 ("PCM Playback Volume",
+			AIC32X4_LDACVOL, AIC32X4_RDACVOL, 0, 0xAF, 0),
+	SOC_DOUBLE_R_AIC32x4("HP Driver Gain Volume",
+			AIC32X4_HPLGAIN, AIC32X4_HPRGAIN, 0, 0x23, 0),
+	SOC_DOUBLE_R_AIC32x4("LO Driver Gain Volume",
+			AIC32X4_LOLGAIN, AIC32X4_LORGAIN, 0, 0x23 , 0),
 	SOC_DOUBLE_R("HP DAC Playback Switch", AIC32X4_HPLGAIN,
 			AIC32X4_HPRGAIN, 6, 0x01, 1),
 	SOC_DOUBLE_R("LO DAC Playback Switch", AIC32X4_LOLGAIN,
@@ -91,8 +108,8 @@ static const struct snd_kcontrol_new aic
 	SOC_SINGLE("ADCFGA Left Mute Switch", AIC32X4_ADCFGA, 7, 1, 0),
 	SOC_SINGLE("ADCFGA Right Mute Switch", AIC32X4_ADCFGA, 3, 1, 0),
 
-	SOC_DOUBLE_R_TLV("ADC Level Volume", AIC32X4_LADCVOL,
-			AIC32X4_RADCVOL, 0, 0x28, 0, tlv_step_0_5),
+	SOC_DOUBLE_R_AIC32x4 ("ADC Level Volume",
+			AIC32X4_LADCVOL, AIC32X4_RADCVOL, 0, 0x3F, 0),
 	SOC_DOUBLE_R_TLV("PGA Level Volume", AIC32X4_LMICPGAVOL,
 			AIC32X4_RMICPGAVOL, 0, 0x5f, 0, tlv_step_0_5),
 
@@ -262,6 +279,142 @@ static const struct snd_soc_dapm_route a
 	{"Right ADC", NULL, "Right Input Mixer"},
 };
 
+/*
+ *----------------------------------------------------------------------------
+ * Function : snd_soc_info_volsw_2r_aic32x4
+ * Purpose  : Callback to get the info of the value of a double mixer control
+ * 	      that spans two registers.
+ *----------------------------------------------------------------------------
+ */
+static int snd_soc_info_volsw_2r_aic32x4(struct snd_kcontrol *kcontrol,
+                                         struct snd_ctl_elem_info *uinfo)
+{
+        int mask = (kcontrol->private_value >> 12) & 0xff;
+
+        uinfo->type =
+                mask == 1 ? SNDRV_CTL_ELEM_TYPE_BOOLEAN : SNDRV_CTL_ELEM_TYPE_INTEGER;
+        uinfo->count = 2;
+        uinfo->value.integer.min = 0;
+        uinfo->value.integer.max = mask;
+        return 0;
+}
+
+/*
+ *----------------------------------------------------------------------------
+ * Function : snd_soc_get_volsw_2r_aic32x4
+ * Purpose  : Callback to get the value of a double mixer control that spans
+ *            two registers.
+ *----------------------------------------------------------------------------
+ */
+int snd_soc_get_volsw_2r_aic32x4(struct snd_kcontrol *kcontrol,
+				 struct snd_ctl_elem_value *ucontrol)
+{
+	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+	int reg = kcontrol->private_value & AIC32x4_8BITS_MASK;
+	int reg2 = (kcontrol->private_value >> 24) & AIC32x4_8BITS_MASK;
+	int mask;
+	int shift;
+	unsigned short val, val2;
+
+	if (strcmp (kcontrol->id.name, "PCM Playback Volume") == 0)
+    	{
+      		mask = AIC32x4_8BITS_MASK;
+		shift = 0;
+	}
+	else if (strcmp (kcontrol->id.name, "ADC Level Volume") == 0)
+    	{
+      		mask = 0x7F;
+	        shift = 0;
+	}
+	else if ((!strcmp(kcontrol->id.name, "HP Driver Gain Volume")) ||
+                 (!strcmp(kcontrol->id.name, "LO Driver Gain Volume"))) {
+		mask = 0x3F;
+		shift = 0;
+	}
+	else {
+		printk("Invalid kcontrol name\n");
+		return -1;
+	}
+
+	val = (snd_soc_read(codec, reg) >> shift) & mask;
+	val2 = (snd_soc_read(codec, reg2) >> shift) & mask;
+
+	if (strcmp (kcontrol->id.name, "PCM Playback Volume") == 0)
+	{
+		ucontrol->value.integer.value[0] =
+					(val <= 48) ? (val + 127) : (val - 129);
+		ucontrol->value.integer.value[1] =
+					(val2 <= 48) ? (val2 + 127) : (val2 - 129);
+	}
+	else if (strcmp (kcontrol->id.name, "ADC Level Volume") == 0)
+	{
+                ucontrol->value.integer.value[0] =
+                        (val <= 38) ? (val + 25) : (val - 103);
+                ucontrol->value.integer.value[1] =
+                        (val2 <= 38) ? (val2 + 25) : (val2 - 103);
+	}
+	else if ((!strcmp(kcontrol->id.name, "HP Driver Gain Volume"))
+                 || (!strcmp(kcontrol->id.name, "LO Driver Gain Volume"))) {
+		ucontrol->value.integer.value[0] =
+                        (val <= 29) ? (val + 6) : (val - 58);
+		ucontrol->value.integer.value[1] =
+                        (val2 <= 29) ? (val2 + 6) : (val2 - 58);
+	}
+
+	return 0;
+}
+
+
+/*
+ *----------------------------------------------------------------------------
+ * Function : snd_soc_put_volsw_2r_aic32x4
+ * Purpose  : Callback to set the value of a double mixer control that spans
+ *            two registers.
+ *----------------------------------------------------------------------------
+ */
+int snd_soc_put_volsw_2r_aic32x4(struct snd_kcontrol *kcontrol,
+                                 struct snd_ctl_elem_value *ucontrol)
+{
+        struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+        int reg = kcontrol->private_value & AIC32x4_8BITS_MASK;
+        int reg2 = (kcontrol->private_value >> 24) & AIC32x4_8BITS_MASK;
+        int err;
+        unsigned short val, val2, val_mask;
+
+        val = ucontrol->value.integer.value[0];
+        val2 = ucontrol->value.integer.value[1];
+
+
+	if (strcmp (kcontrol->id.name, "PCM Playback Volume") == 0) {
+		val = (val >= 127) ? (val - 127) : (val + 129);
+	        val2 = (val2 >= 127) ? (val2 - 127) : (val2 + 129);
+                val_mask = 0xFF;          /* 8 bits */
+	}
+	else if (strcmp (kcontrol->id.name, "ADC Level Volume") == 0) {
+                val = (val >= 25) ? (val - 25) : (val + 103);
+                val2 = (val2 >= 25) ? (val2 - 25) : (val2 + 103);
+                val_mask = 0x7F;          /* 7 bits */
+	}
+	else if ((!strcmp(kcontrol->id.name, "HP Driver Gain Volume")) ||
+                   (!strcmp(kcontrol->id.name, "LO Driver Gain Volume"))) {
+                val = (val >= 6) ? (val - 6) : (val + 58);
+                val2 = (val2 >= 6) ? (val2 - 6) : (val2 + 58);
+                val_mask = 0x3F;	/* 6 bits */
+        }
+	else {
+                printk("Invalid control name\n");
+                return -1;
+        }
+
+	if ((err = snd_soc_update_bits(codec, reg, val_mask, val)) < 0) {
+                printk("Error while updating bits\n");
+                return err;
+        }
+
+        err = snd_soc_update_bits(codec, reg2, val_mask, val2);
+        return err;
+}
+
 static inline int aic32x4_change_page(struct snd_soc_codec *codec,
 					unsigned int new_page)
 {
@@ -555,6 +708,10 @@ static int aic32x4_set_bias_level(struct
 			/* Switch on BCLK_N Divider */
 			snd_soc_update_bits(codec, AIC32X4_BCLKN,
 					    AIC32X4_BCLKEN, AIC32X4_BCLKEN);
+
+			/* Switch on MICBIAS */
+			snd_soc_update_bits(codec, AIC32X4_MICBIAS,
+						AIC32X4_MICBIAS_EN, AIC32X4_MICBIAS_EN);
 		}
 		break;
 	case SND_SOC_BIAS_PREPARE:
@@ -584,6 +741,10 @@ static int aic32x4_set_bias_level(struct
 			/* Switch off BCLK_N Divider */
 			snd_soc_update_bits(codec, AIC32X4_BCLKN,
 					    AIC32X4_BCLKEN, 0);
+
+			/* Switch off MICBIAS */
+			snd_soc_update_bits(codec, AIC32X4_MICBIAS,
+						AIC32X4_MICBIAS_EN, 0);
 		}
 		break;
 	case SND_SOC_BIAS_OFF:
@@ -678,6 +839,11 @@ static int aic32x4_probe(struct snd_soc_
 	if (aic32x4->micpga_routing & AIC32X4_MICPGA_ROUTE_RMIC_IN1L_10K) {
 		snd_soc_write(codec, AIC32X4_RMICPGANIN, AIC32X4_RMICPGANIN_IN1L_10K);
 	}
+	if (aic32x4->micpga_routing & AIC32X4_MICPGA_ROUTE_NEG_CM1_10K) {
+		/* Configure negative leg of MicPGA to CM */
+		snd_soc_write(codec, AIC32X4_LMICPGANIN, AIC32X4_LMICPGANIN_CM1L_10K);
+		snd_soc_write(codec, AIC32X4_RMICPGANIN, AIC32X4_RMICPGANIN_CM1R_10K);
+	}
 
 	aic32x4_set_bias_level(codec, SND_SOC_BIAS_STANDBY);
 	snd_soc_add_controls(codec, aic32x4_snd_controls,
diff -rupN linux-orig/sound/soc/codecs/tlv320aic32x4.h linux/sound/soc/codecs/tlv320aic32x4.h
--- linux-orig/sound/soc/codecs/tlv320aic32x4.h	2012-11-09 16:16:08.000000000 +0100
+++ linux/sound/soc/codecs/tlv320aic32x4.h	2013-01-04 11:59:41.280550699 +0100
@@ -115,9 +115,12 @@
 
 #define AIC32X4_MICBIAS_LDOIN		0x08
 #define AIC32X4_MICBIAS_2075V		0x60
+#define AIC32X4_MICBIAS_EN			(0x01 << 6)
 
 #define AIC32X4_LMICPGANIN_IN2R_10K	0x10
 #define AIC32X4_RMICPGANIN_IN1L_10K	0x10
+#define AIC32X4_LMICPGANIN_CM1L_10K	0x40
+#define AIC32X4_RMICPGANIN_CM1R_10K	0x40
 
 #define AIC32X4_LMICPGAVOL_NOGAIN	0x80
 #define AIC32X4_RMICPGAVOL_NOGAIN	0x80
